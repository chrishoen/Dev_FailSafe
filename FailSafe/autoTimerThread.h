#pragma once

/*==============================================================================
Timer test thread.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include "risThreadsTimerThread.h"
#include "dspHistoryGaussNoise.h"
#include "autoSlowClassifier.h"
#include "autoSwitchLogic.h"

namespace Auto
{
//******************************************************************************
//******************************************************************************
//******************************************************************************

class TimerThread : public Ris::Threads::BaseTimerThread
{
public:
   typedef Ris::Threads::BaseTimerThread BaseClass;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   // Suspend.
   bool mSuspendFlag;

   // Input value.
   double mValueA;
   double mValueB;
   double mDeltaA;
   double mDeltaB;
   double mValueAPN;
   double mValueBPN;

   int mRequestedPath;

   // Noise request and sigma. These are set by the user.
   bool   mNoiseRequestFlag;
   double mNoiseSigma;
   double mNoise;

   // Gaussian noise generator.
   Dsp::HistoryGaussNoise mGaussNoise;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   Auto::SlowClassifier  mClassifier;
   Auto::SwitchLogic     mSwitchLogic;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Constructor.
   TimerThread();

   // Base class overloads.
   void threadInitFunction() override;
   void executeOnTimer(int aTimeCount) override;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Update the simulated input value.
   void doUpdateValue ();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _AUTOTIMERTHREAD_CPP_
          TimerThread* gTimerThread;
#else
   extern TimerThread* gTimerThread;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


