#pragma once

/*==============================================================================
Timer test thread.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include "risThreadsTimerThread.h"
#include "dspHistoryGaussNoise.h"
#include "sswSlowClassifier.h"
#include "sswSwitchLogic.h"

namespace SSW
{
//******************************************************************************
//******************************************************************************
//******************************************************************************

class TimerThread : public Ris::Threads::BaseTimerThread
{
public:
   typedef Ris::Threads::BaseTimerThread BaseClass;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   // Suspend.
   bool mSuspendFlag;

   // Input value.
   float mValueA;
   float mValueB;
   float mDeltaA;
   float mDeltaB;
   float mValueAPN;
   float mValueBPN;

   int mRequestedPath;

   // Noise request and sigma. These are set by the user.
   bool   mNoiseRequestFlag;
   float mNoiseSigma;
   float mNoise;

   // Gaussian noise generator.
   Dsp::HistoryGaussNoise mGaussNoise;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   SSW::SlowClassifier  mClassifier;
   SSW::SwitchLogic     mSwitchLogic;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Constructor.
   TimerThread();

   // Base class overloads.
   void threadInitFunction() override;
   void executeOnTimer(int aTimeCount) override;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Update the simulated input value.
   void doUpdateValue ();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _AUTOTIMERTHREAD_CPP_
          TimerThread* gTimerThread;
#else
   extern TimerThread* gTimerThread;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


